
stm32f411_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bdc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d74  08000d74  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d74  08000d74  00002414  2**0
                  CONTENTS
  4 .ARM          00000008  08000d74  08000d74  00001d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d7c  08000d7c  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d7c  08000d7c  00001d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d80  08000d80  00001d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000414  20000000  08000d84  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000414  08001198  00002414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08001198  00002454  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016a0  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005cb  00000000  00000000  00003ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000040b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011a  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c83  00000000  00000000  00004352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002184  00000000  00000000  00006fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a736  00000000  00000000  00009159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001388f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000530  00000000  00000000  000138d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00013e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000414 	.word	0x20000414
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d5c 	.word	0x08000d5c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000418 	.word	0x20000418
 80001d4:	08000d5c 	.word	0x08000d5c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <USART2_Init>:

char msg[1024] = "usart test....\n\r" ;

USART_Handle_t usart2_handle ;

void USART2_Init(void){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2 ;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000224 <USART2_Init+0x3c>)
 80001ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000228 <USART2_Init+0x40>)
 80001f0:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000224 <USART2_Init+0x3c>)
 80001f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001f8:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000224 <USART2_Init+0x3c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	739a      	strb	r2, [r3, #14]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000200:	4b08      	ldr	r3, [pc, #32]	@ (8000224 <USART2_Init+0x3c>)
 8000202:	2200      	movs	r2, #0
 8000204:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000206:	4b07      	ldr	r3, [pc, #28]	@ (8000224 <USART2_Init+0x3c>)
 8000208:	2200      	movs	r2, #0
 800020a:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 800020c:	4b05      	ldr	r3, [pc, #20]	@ (8000224 <USART2_Init+0x3c>)
 800020e:	2200      	movs	r2, #0
 8000210:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000212:	4b04      	ldr	r3, [pc, #16]	@ (8000224 <USART2_Init+0x3c>)
 8000214:	2200      	movs	r2, #0
 8000216:	73da      	strb	r2, [r3, #15]
	USART_Init(&usart2_handle);
 8000218:	4802      	ldr	r0, [pc, #8]	@ (8000224 <USART2_Init+0x3c>)
 800021a:	f000 fc39 	bl	8000a90 <USART_Init>


}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000430 	.word	0x20000430
 8000228:	40004400 	.word	0x40004400

0800022c <USART2_GPIOInit>:


void 	USART2_GPIOInit(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <USART2_GPIOInit+0x40>)
 8000234:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000236:	2302      	movs	r3, #2
 8000238:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPtype = GPIO_OPTYPE_OD;
 800023a:	2301      	movs	r3, #1
 800023c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800023e:	2301      	movs	r3, #1
 8000240:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000242:	2302      	movs	r3, #2
 8000244:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000246:	2307      	movs	r3, #7
 8000248:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800024a:	2302      	movs	r3, #2
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f943 	bl	80004dc <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000256:	2303      	movs	r3, #3
 8000258:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f93d 	bl	80004dc <GPIO_Init>


}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020000 	.word	0x40020000

08000270 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000276:	4b13      	ldr	r3, [pc, #76]	@ (80002c4 <GPIO_ButtonInit+0x54>)
 8000278:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800027a:	2300      	movs	r3, #0
 800027c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 800027e:	2300      	movs	r3, #0
 8000280:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000282:	2302      	movs	r3, #2
 8000284:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000286:	2300      	movs	r3, #0
 8000288:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f924 	bl	80004dc <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000294:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <GPIO_ButtonInit+0x58>)
 8000296:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000298:	230c      	movs	r3, #12
 800029a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800029c:	2301      	movs	r3, #1
 800029e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a0:	2302      	movs	r3, #2
 80002a2:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPtype = GPIO_OPTYPE_OD;
 80002a4:	2301      	movs	r3, #1
 80002a6:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002a8:	2300      	movs	r3, #0
 80002aa:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <GPIO_ButtonInit+0x58>)
 80002b0:	f000 f874 	bl	800039c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80002b4:	463b      	mov	r3, r7
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 f910 	bl	80004dc <GPIO_Init>

}
 80002bc:	bf00      	nop
 80002be:	3718      	adds	r7, #24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40020000 	.word	0x40020000
 80002c8:	40020c00 	.word	0x40020c00

080002cc <delay>:

void delay(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	e002      	b.n	80002de <delay+0x12>
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3301      	adds	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a04      	ldr	r2, [pc, #16]	@ (80002f4 <delay+0x28>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d9f8      	bls.n	80002d8 <delay+0xc>
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	0003d08f 	.word	0x0003d08f

080002f8 <main>:


int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002fc:	f7ff ffb8 	bl	8000270 <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000300:	f7ff ff94 	bl	800022c <USART2_GPIOInit>

    USART2_Init();
 8000304:	f7ff ff70 	bl	80001e8 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	480b      	ldr	r0, [pc, #44]	@ (8000338 <main+0x40>)
 800030c:	f000 fb92 	bl	8000a34 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000310:	bf00      	nop
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	@ (800033c <main+0x44>)
 8000316:	f000 fa6f 	bl	80007f8 <GPIO_ReadFromInputPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f8      	beq.n	8000312 <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000320:	f7ff ffd4 	bl	80002cc <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000324:	4806      	ldr	r0, [pc, #24]	@ (8000340 <main+0x48>)
 8000326:	f7ff ff57 	bl	80001d8 <strlen>
 800032a:	4603      	mov	r3, r0
 800032c:	461a      	mov	r2, r3
 800032e:	4904      	ldr	r1, [pc, #16]	@ (8000340 <main+0x48>)
 8000330:	4804      	ldr	r0, [pc, #16]	@ (8000344 <main+0x4c>)
 8000332:	f000 fc2e 	bl	8000b92 <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000336:	e7eb      	b.n	8000310 <main+0x18>
 8000338:	40004400 	.word	0x40004400
 800033c:	40020000 	.word	0x40020000
 8000340:	20000000 	.word	0x20000000
 8000344:	20000430 	.word	0x20000430

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	@ (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	@ (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	@ (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 fccd 	bl	8000d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ffbd 	bl	80002f8 <main>

0800037e <LoopForever>:

LoopForever:
  b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 800038c:	08000d84 	.word	0x08000d84
  ldr r2, =_sbss
 8000390:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000394:	20000454 	.word	0x20000454

08000398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC_IRQHandler>
	...

0800039c <GPIO_PeriClockControl>:
 * @brief  Enables or disables the peripheral clock for a given GPIO port.
 * @param  pGPIOx: Pointer to the GPIO peripheral base address (GPIOA, GPIOB, etc.).
 * @param  EnorDi: ENABLE (1) to enable the clock, DISABLE (0) to disable the clock.
 * @retval None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
    if (EnorDi == ENABLE) {
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d141      	bne.n	8000432 <GPIO_PeriClockControl+0x96>
        if (pGPIOx == GPIOA) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a43      	ldr	r2, [pc, #268]	@ (80004c0 <GPIO_PeriClockControl+0x124>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x28>
            GPIOA_PCLK_EN();
 80003b6:	4b43      	ldr	r3, [pc, #268]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ba:	4a42      	ldr	r2, [pc, #264]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6313      	str	r3, [r2, #48]	@ 0x30
            GPIOE_PCLK_DI();
        } else if (pGPIOx == GPIOH) {
            GPIOH_PCLK_DI();
        }
    }
}
 80003c2:	e077      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOB) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a40      	ldr	r2, [pc, #256]	@ (80004c8 <GPIO_PeriClockControl+0x12c>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d106      	bne.n	80003da <GPIO_PeriClockControl+0x3e>
            GPIOB_PCLK_EN();
 80003cc:	4b3d      	ldr	r3, [pc, #244]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d0:	4a3c      	ldr	r2, [pc, #240]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d8:	e06c      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOC) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4a3b      	ldr	r2, [pc, #236]	@ (80004cc <GPIO_PeriClockControl+0x130>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d106      	bne.n	80003f0 <GPIO_PeriClockControl+0x54>
            GPIOC_PCLK_EN();
 80003e2:	4b38      	ldr	r3, [pc, #224]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e6:	4a37      	ldr	r2, [pc, #220]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ee:	e061      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOD) {
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4a37      	ldr	r2, [pc, #220]	@ (80004d0 <GPIO_PeriClockControl+0x134>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d106      	bne.n	8000406 <GPIO_PeriClockControl+0x6a>
            GPIOD_PCLK_EN();
 80003f8:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fc:	4a31      	ldr	r2, [pc, #196]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80003fe:	f043 0308 	orr.w	r3, r3, #8
 8000402:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000404:	e056      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOE) {
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4a32      	ldr	r2, [pc, #200]	@ (80004d4 <GPIO_PeriClockControl+0x138>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d106      	bne.n	800041c <GPIO_PeriClockControl+0x80>
            GPIOE_PCLK_EN();
 800040e:	4b2d      	ldr	r3, [pc, #180]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000412:	4a2c      	ldr	r2, [pc, #176]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000414:	f043 0310 	orr.w	r3, r3, #16
 8000418:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041a:	e04b      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        }else if (pGPIOx == GPIOH) {
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	4a2e      	ldr	r2, [pc, #184]	@ (80004d8 <GPIO_PeriClockControl+0x13c>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d147      	bne.n	80004b4 <GPIO_PeriClockControl+0x118>
            GPIOH_PCLK_EN();
 8000424:	4b27      	ldr	r3, [pc, #156]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000428:	4a26      	ldr	r2, [pc, #152]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 800042a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800042e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000430:	e040      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        if (pGPIOx == GPIOA) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a22      	ldr	r2, [pc, #136]	@ (80004c0 <GPIO_PeriClockControl+0x124>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d106      	bne.n	8000448 <GPIO_PeriClockControl+0xac>
            GPIOA_PCLK_DI();
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 800043c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043e:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000446:	e035      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOB) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a1f      	ldr	r2, [pc, #124]	@ (80004c8 <GPIO_PeriClockControl+0x12c>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d106      	bne.n	800045e <GPIO_PeriClockControl+0xc2>
            GPIOB_PCLK_DI();
 8000450:	4b1c      	ldr	r3, [pc, #112]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000454:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000456:	f023 0302 	bic.w	r3, r3, #2
 800045a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045c:	e02a      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOC) {
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4a1a      	ldr	r2, [pc, #104]	@ (80004cc <GPIO_PeriClockControl+0x130>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <GPIO_PeriClockControl+0xd8>
            GPIOC_PCLK_DI();
 8000466:	4b17      	ldr	r3, [pc, #92]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046a:	4a16      	ldr	r2, [pc, #88]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 800046c:	f023 0304 	bic.w	r3, r3, #4
 8000470:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000472:	e01f      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOD) {
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a16      	ldr	r2, [pc, #88]	@ (80004d0 <GPIO_PeriClockControl+0x134>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d106      	bne.n	800048a <GPIO_PeriClockControl+0xee>
            GPIOD_PCLK_DI();
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000480:	4a10      	ldr	r2, [pc, #64]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000482:	f023 0308 	bic.w	r3, r3, #8
 8000486:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000488:	e014      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        }else if (pGPIOx == GPIOE) {
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a11      	ldr	r2, [pc, #68]	@ (80004d4 <GPIO_PeriClockControl+0x138>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d106      	bne.n	80004a0 <GPIO_PeriClockControl+0x104>
            GPIOE_PCLK_DI();
 8000492:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000496:	4a0b      	ldr	r2, [pc, #44]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 8000498:	f023 0310 	bic.w	r3, r3, #16
 800049c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049e:	e009      	b.n	80004b4 <GPIO_PeriClockControl+0x118>
        } else if (pGPIOx == GPIOH) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <GPIO_PeriClockControl+0x13c>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d105      	bne.n	80004b4 <GPIO_PeriClockControl+0x118>
            GPIOH_PCLK_DI();
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a05      	ldr	r2, [pc, #20]	@ (80004c4 <GPIO_PeriClockControl+0x128>)
 80004ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020400 	.word	0x40020400
 80004cc:	40020800 	.word	0x40020800
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40021c00 	.word	0x40021c00

080004dc <GPIO_Init>:
/**
 * @brief  Initializes the given GPIO pin based on the configuration provided.
 * @param  pGPIOHandle: Pointer to GPIO_Handle_t structure, containing the pin settings.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
    uint32_t temp = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]

    GPIO_PeriClockControl(pGPIOHandle ->pGPIOx, ENABLE);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2101      	movs	r1, #1
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ff54 	bl	800039c <GPIO_PeriClockControl>

    /* Configure the mode of the GPIO pin */
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d820      	bhi.n	800053e <GPIO_Init+0x62>
        // Set the mode for input, output, analog, or alternate function
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	461a      	mov	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	617b      	str	r3, [r7, #20]

        // Clear the existing mode bits
        pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	2103      	movs	r1, #3
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	4619      	mov	r1, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	400a      	ands	r2, r1
 800052a:	601a      	str	r2, [r3, #0]

        // Set the new mode bits
        pGPIOHandle->pGPIOx->MODER |= temp;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	430a      	orrs	r2, r1
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e0b8      	b.n	80006b0 <GPIO_Init+0x1d4>
    }else {
        // Code for interrupt mode will be added
    	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2b04      	cmp	r3, #4
 8000544:	d117      	bne.n	8000576 <GPIO_Init+0x9a>

    		EXTI->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000546:	4b43      	ldr	r3, [pc, #268]	@ (8000654 <GPIO_Init+0x178>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a3f      	ldr	r2, [pc, #252]	@ (8000654 <GPIO_Init+0x178>)
 8000558:	430b      	orrs	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]
    		EXTI->RTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800055c:	4b3d      	ldr	r3, [pc, #244]	@ (8000654 <GPIO_Init+0x178>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a39      	ldr	r2, [pc, #228]	@ (8000654 <GPIO_Init+0x178>)
 8000570:	400b      	ands	r3, r1
 8000572:	6093      	str	r3, [r2, #8]
 8000574:	e035      	b.n	80005e2 <GPIO_Init+0x106>


    	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b05      	cmp	r3, #5
 800057c:	d117      	bne.n	80005ae <GPIO_Init+0xd2>
    		EXTI->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800057e:	4b35      	ldr	r3, [pc, #212]	@ (8000654 <GPIO_Init+0x178>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7912      	ldrb	r2, [r2, #4]
 8000586:	4611      	mov	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	408a      	lsls	r2, r1
 800058c:	4611      	mov	r1, r2
 800058e:	4a31      	ldr	r2, [pc, #196]	@ (8000654 <GPIO_Init+0x178>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6093      	str	r3, [r2, #8]
    		EXTI->FTSR &= ~(1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000594:	4b2f      	ldr	r3, [pc, #188]	@ (8000654 <GPIO_Init+0x178>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000654 <GPIO_Init+0x178>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
 80005ac:	e019      	b.n	80005e2 <GPIO_Init+0x106>

    	}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FRT){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	d115      	bne.n	80005e2 <GPIO_Init+0x106>
    		EXTI->FTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005b6:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <GPIO_Init+0x178>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a23      	ldr	r2, [pc, #140]	@ (8000654 <GPIO_Init+0x178>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	60d3      	str	r3, [r2, #12]
    		EXTI->RTSR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <GPIO_Init+0x178>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000654 <GPIO_Init+0x178>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]

    	}

    	SYSCFG_PCLK_EN();
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <GPIO_Init+0x17c>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000658 <GPIO_Init+0x17c>)
 80005e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ec:	6453      	str	r3, [r2, #68]	@ 0x44
    	uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	74fb      	strb	r3, [r7, #19]
    	uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	791b      	ldrb	r3, [r3, #4]
 80005fa:	f003 0303 	and.w	r3, r3, #3
 80005fe:	74bb      	strb	r3, [r7, #18]
    	uint8_t port_code = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx) ;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a15      	ldr	r2, [pc, #84]	@ (800065c <GPIO_Init+0x180>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d034      	beq.n	8000674 <GPIO_Init+0x198>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a14      	ldr	r2, [pc, #80]	@ (8000660 <GPIO_Init+0x184>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d01d      	beq.n	8000650 <GPIO_Init+0x174>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <GPIO_Init+0x188>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d016      	beq.n	800064c <GPIO_Init+0x170>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a11      	ldr	r2, [pc, #68]	@ (8000668 <GPIO_Init+0x18c>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d00f      	beq.n	8000648 <GPIO_Init+0x16c>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a0f      	ldr	r2, [pc, #60]	@ (800066c <GPIO_Init+0x190>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d008      	beq.n	8000644 <GPIO_Init+0x168>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <GPIO_Init+0x194>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d101      	bne.n	8000640 <GPIO_Init+0x164>
 800063c:	2307      	movs	r3, #7
 800063e:	e01a      	b.n	8000676 <GPIO_Init+0x19a>
 8000640:	2300      	movs	r3, #0
 8000642:	e018      	b.n	8000676 <GPIO_Init+0x19a>
 8000644:	2304      	movs	r3, #4
 8000646:	e016      	b.n	8000676 <GPIO_Init+0x19a>
 8000648:	2303      	movs	r3, #3
 800064a:	e014      	b.n	8000676 <GPIO_Init+0x19a>
 800064c:	2302      	movs	r3, #2
 800064e:	e012      	b.n	8000676 <GPIO_Init+0x19a>
 8000650:	2301      	movs	r3, #1
 8000652:	e010      	b.n	8000676 <GPIO_Init+0x19a>
 8000654:	40013c00 	.word	0x40013c00
 8000658:	40023800 	.word	0x40023800
 800065c:	40020000 	.word	0x40020000
 8000660:	40020400 	.word	0x40020400
 8000664:	40020800 	.word	0x40020800
 8000668:	40020c00 	.word	0x40020c00
 800066c:	40021000 	.word	0x40021000
 8000670:	40021c00 	.word	0x40021c00
 8000674:	2300      	movs	r3, #0
 8000676:	747b      	strb	r3, [r7, #17]
    	SYSCGF -> EXTICR[temp1]   |=  (port_code << temp2*4)  ;
 8000678:	4a5d      	ldr	r2, [pc, #372]	@ (80007f0 <GPIO_Init+0x314>)
 800067a:	7cfb      	ldrb	r3, [r7, #19]
 800067c:	3302      	adds	r3, #2
 800067e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000682:	7c79      	ldrb	r1, [r7, #17]
 8000684:	7cbb      	ldrb	r3, [r7, #18]
 8000686:	009b      	lsls	r3, r3, #2
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	4618      	mov	r0, r3
 800068e:	4958      	ldr	r1, [pc, #352]	@ (80007f0 <GPIO_Init+0x314>)
 8000690:	7cfb      	ldrb	r3, [r7, #19]
 8000692:	4302      	orrs	r2, r0
 8000694:	3302      	adds	r3, #2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]



    	EXTI->IMR |= (1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800069a:	4b56      	ldr	r3, [pc, #344]	@ (80007f4 <GPIO_Init+0x318>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	687a      	ldr	r2, [r7, #4]
 80006a0:	7912      	ldrb	r2, [r2, #4]
 80006a2:	4611      	mov	r1, r2
 80006a4:	2201      	movs	r2, #1
 80006a6:	408a      	lsls	r2, r1
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a52      	ldr	r2, [pc, #328]	@ (80007f4 <GPIO_Init+0x318>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	6013      	str	r3, [r2, #0]

    }

    /* Configure the speed of the GPIO pin */
    temp = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	617b      	str	r3, [r7, #20]

    // Clear the existing speed bits
    pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	2103      	movs	r1, #3
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	43db      	mvns	r3, r3
 80006da:	4619      	mov	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	400a      	ands	r2, r1
 80006e2:	609a      	str	r2, [r3, #8]

    // Set the new speed bits
    pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	6899      	ldr	r1, [r3, #8]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	697a      	ldr	r2, [r7, #20]
 80006f0:	430a      	orrs	r2, r1
 80006f2:	609a      	str	r2, [r3, #8]

    /* Configure the pull-up / pull-down resistor */
    temp = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	79db      	ldrb	r3, [r3, #7]
 80006fc:	461a      	mov	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	617b      	str	r3, [r7, #20]

    // Clear the existing pull-up/pull-down bits
    pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	68da      	ldr	r2, [r3, #12]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	2103      	movs	r1, #3
 8000718:	fa01 f303 	lsl.w	r3, r1, r3
 800071c:	43db      	mvns	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	400a      	ands	r2, r1
 8000726:	60da      	str	r2, [r3, #12]

    // Set the new pull-up/pull-down bits
    pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68d9      	ldr	r1, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	430a      	orrs	r2, r1
 8000736:	60da      	str	r2, [r3, #12]

    /* Configure the output type (Push-Pull or Open-Drain) */
    temp = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear the bit
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	4619      	mov	r1, r3
 8000748:	2301      	movs	r3, #1
 800074a:	408b      	lsls	r3, r1
 800074c:	43db      	mvns	r3, r3
 800074e:	4619      	mov	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	400a      	ands	r2, r1
 8000756:	605a      	str	r2, [r3, #4]
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPtype << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Set the bit
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7a1b      	ldrb	r3, [r3, #8]
 800075c:	461a      	mov	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	791b      	ldrb	r3, [r3, #4]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
    pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6859      	ldr	r1, [r3, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	697a      	ldr	r2, [r7, #20]
 8000774:	430a      	orrs	r2, r1
 8000776:	605a      	str	r2, [r3, #4]

    /* Configure the alternate function if mode is set to alternate function mode */
    if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b02      	cmp	r3, #2
 800077e:	d132      	bne.n	80007e6 <GPIO_Init+0x30a>
        uint32_t temp1, temp2;

        // Determine the AFR register index (0 for AFR[0], 1 for AFR[1])
        temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	08db      	lsrs	r3, r3, #3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	60fb      	str	r3, [r7, #12]
        temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	60bb      	str	r3, [r7, #8]

        // Clear existing alternate function bits
        pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	3208      	adds	r2, #8
 800079c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	210f      	movs	r1, #15
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4011      	ands	r1, r2
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	3208      	adds	r2, #8
 80007b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // Set the new alternate function bits
        pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7a5b      	ldrb	r3, [r3, #9]
 80007cc:	4619      	mov	r1, r3
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	fa01 f303 	lsl.w	r3, r1, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4311      	orrs	r1, r2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	3208      	adds	r2, #8
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40013800 	.word	0x40013800
 80007f4:	40013c00 	.word	0x40013c00

080007f8 <GPIO_ReadFromInputPin>:
	}


}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx , uint8_t PinNumber) {
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t value ;
	value = (uint8_t)(pGPIOx->IDR >> (PinNumber)&(0x00000001)) ;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	691a      	ldr	r2, [r3, #16]
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	fa22 f303 	lsr.w	r3, r2, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]
	return value ;
 8000816:	7bfb      	ldrb	r3, [r7, #15]

}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr
	...

08000824 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800082a:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <RCC_GetPCLK1Value+0x9c>)
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	b2db      	uxtb	r3, r3
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 8000838:	7a7b      	ldrb	r3, [r7, #9]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d102      	bne.n	8000844 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 800083e:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <RCC_GetPCLK1Value+0xa0>)
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	e00b      	b.n	800085c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000844:	7a7b      	ldrb	r3, [r7, #9]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d102      	bne.n	8000850 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <RCC_GetPCLK1Value+0xa4>)
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e005      	b.n	800085c <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000850:	7a7b      	ldrb	r3, [r7, #9]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d102      	bne.n	800085c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000856:	f000 f88d 	bl	8000974 <RCC_GetPLLOutputClock>
 800085a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 800085c:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <RCC_GetPCLK1Value+0x9c>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 030f 	and.w	r3, r3, #15
 8000868:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800086a:	7a3b      	ldrb	r3, [r7, #8]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d802      	bhi.n	8000876 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	72fb      	strb	r3, [r7, #11]
 8000874:	e005      	b.n	8000882 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000876:	7a3b      	ldrb	r3, [r7, #8]
 8000878:	3b08      	subs	r3, #8
 800087a:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <RCC_GetPCLK1Value+0xa8>)
 800087c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000880:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <RCC_GetPCLK1Value+0x9c>)
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	0a9b      	lsrs	r3, r3, #10
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000890:	7a3b      	ldrb	r3, [r7, #8]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d802      	bhi.n	800089c <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	72bb      	strb	r3, [r7, #10]
 800089a:	e004      	b.n	80008a6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 800089c:	7a3b      	ldrb	r3, [r7, #8]
 800089e:	3b04      	subs	r3, #4
 80008a0:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <RCC_GetPCLK1Value+0xac>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80008ae:	7abb      	ldrb	r3, [r7, #10]
 80008b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b4:	607b      	str	r3, [r7, #4]

	return pclk1;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	00f42400 	.word	0x00f42400
 80008c8:	007a1200 	.word	0x007a1200
 80008cc:	20000400 	.word	0x20000400
 80008d0:	20000410 	.word	0x20000410

080008d4 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <RCC_GetPCLK2Value+0x8c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	089b      	lsrs	r3, r3, #2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f003 0303 	and.w	r3, r3, #3
 80008ea:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80008ec:	7a7b      	ldrb	r3, [r7, #9]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <RCC_GetPCLK2Value+0x90>)
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e001      	b.n	80008fc <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <RCC_GetPCLK2Value+0x94>)
 80008fa:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <RCC_GetPCLK2Value+0x8c>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b07      	cmp	r3, #7
 800090c:	d802      	bhi.n	8000914 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 800090e:	2301      	movs	r3, #1
 8000910:	72fb      	strb	r3, [r7, #11]
 8000912:	e005      	b.n	8000920 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	3b08      	subs	r3, #8
 8000918:	4a14      	ldr	r2, [pc, #80]	@ (800096c <RCC_GetPCLK2Value+0x98>)
 800091a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091e:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <RCC_GetPCLK2Value+0x8c>)
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	0b5b      	lsrs	r3, r3, #13
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d802      	bhi.n	8000938 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	72bb      	strb	r3, [r7, #10]
 8000936:	e004      	b.n	8000942 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b04      	subs	r3, #4
 800093c:	4a0c      	ldr	r2, [pc, #48]	@ (8000970 <RCC_GetPCLK2Value+0x9c>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	fbb2 f2f3 	udiv	r2, r2, r3
 800094a:	7abb      	ldrb	r3, [r7, #10]
 800094c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000950:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000952:	683b      	ldr	r3, [r7, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	00f42400 	.word	0x00f42400
 8000968:	007a1200 	.word	0x007a1200
 800096c:	20000400 	.word	0x20000400
 8000970:	20000410 	.word	0x20000410

08000974 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

	return 0;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
	...

08000984 <USART_PeriClockControl>:
 */


#include "stm32f411xx_usart_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE){
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d120      	bne.n	80009d8 <USART_PeriClockControl+0x54>
		if(pUSARTx == USART1){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <USART_PeriClockControl+0xa0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 800099e:	4b22      	ldr	r3, [pc, #136]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a21      	ldr	r2, [pc, #132]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
			USART2_PCLK_DI();
		}else if (pUSARTx == USART6){
			USART6_PCLK_DI();
		}
	}
}
 80009aa:	e035      	b.n	8000a18 <USART_PeriClockControl+0x94>
		}else if(pUSARTx == USART2){
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a1f      	ldr	r2, [pc, #124]	@ (8000a2c <USART_PeriClockControl+0xa8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 80009b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009be:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009c0:	e02a      	b.n	8000a18 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART6){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000a30 <USART_PeriClockControl+0xac>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d126      	bne.n	8000a18 <USART_PeriClockControl+0x94>
			USART6_PCLK_EN();
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009d6:	e01f      	b.n	8000a18 <USART_PeriClockControl+0x94>
		if(pUSARTx == USART1){
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a12      	ldr	r2, [pc, #72]	@ (8000a24 <USART_PeriClockControl+0xa0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d106      	bne.n	80009ee <USART_PeriClockControl+0x6a>
			USART1_PCLK_DI();
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e4:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009e6:	f023 0310 	bic.w	r3, r3, #16
 80009ea:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009ec:	e014      	b.n	8000a18 <USART_PeriClockControl+0x94>
		}else if(pUSARTx == USART2){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <USART_PeriClockControl+0xa8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d106      	bne.n	8000a04 <USART_PeriClockControl+0x80>
			USART2_PCLK_DI();
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 80009fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000a00:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a02:	e009      	b.n	8000a18 <USART_PeriClockControl+0x94>
		}else if (pUSARTx == USART6){
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <USART_PeriClockControl+0xac>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d105      	bne.n	8000a18 <USART_PeriClockControl+0x94>
			USART6_PCLK_DI();
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a10:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <USART_PeriClockControl+0xa4>)
 8000a12:	f023 0320 	bic.w	r3, r3, #32
 8000a16:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40011000 	.word	0x40011000
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40011400 	.word	0x40011400

08000a34 <USART_PeripheralControl>:

	*(  NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );

}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000a40:	78fb      	ldrb	r3, [r7, #3]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d106      	bne.n	8000a54 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1<<13);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTx->CR1 &= ~(1<<13);
	}
}
 8000a52:	e005      	b.n	8000a60 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1<<13);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr

08000a6a <USART_GetFlagStatus>:


uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName){
 8000a6a:	b480      	push	{r7}
 8000a6c:	b083      	sub	sp, #12
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
 8000a72:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <USART_GetFlagStatus+0x1a>
		return FLAG_SET ;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET ;
 8000a84:	2300      	movs	r3, #0

}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg=0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff6e 	bl	8000984 <USART_PeriClockControl>


	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	791b      	ldrb	r3, [r3, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d104      	bne.n	8000aba <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	e010      	b.n	8000adc <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	791b      	ldrb	r3, [r3, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d104      	bne.n	8000acc <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	e007      	b.n	8000adc <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d103      	bne.n	8000adc <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE ) | ( 1 << USART_CR1_TE) );
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f043 030c 	orr.w	r3, r3, #12
 8000ada:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7b5b      	ldrb	r3, [r3, #13]
 8000ae0:	031b      	lsls	r3, r3, #12
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7bdb      	ldrb	r3, [r3, #15]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d104      	bne.n	8000afa <USART_Init+0x6a>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e00b      	b.n	8000b12 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7bdb      	ldrb	r3, [r3, #15]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d107      	bne.n	8000b12 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b08:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b10:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 |= tempreg;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68d9      	ldr	r1, [r3, #12]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP0;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7b1b      	ldrb	r3, [r3, #12]
 8000b2a:	031b      	lsls	r3, r3, #12
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7b9b      	ldrb	r3, [r3, #14]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d104      	bne.n	8000b50 <USART_Init+0xc0>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e010      	b.n	8000b72 <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7b9b      	ldrb	r3, [r3, #14]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d104      	bne.n	8000b62 <USART_Init+0xd2>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1<< USART_CR3_RTSE);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	e007      	b.n	8000b72 <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7b9b      	ldrb	r3, [r3, #14]
 8000b66:	2b03      	cmp	r3, #3
 8000b68:	d103      	bne.n	8000b72 <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ((1<<USART_CR3_CTSE) | (1<<USART_CR3_RTSE));
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b70:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	4619      	mov	r1, r3
 8000b84:	4610      	mov	r0, r2
 8000b86:	f000 f853 	bl	8000c30 <USART_SetBaudRate>
	//We will cover this in the lecture. No action required here

}
 8000b8a:	bf00      	nop
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	e031      	b.n	8000c08 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000ba4:	bf00      	nop
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2180      	movs	r1, #128	@ 0x80
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5c 	bl	8000a6a <USART_GetFlagStatus>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d0f6      	beq.n	8000ba6 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	7b5b      	ldrb	r3, [r3, #13]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d118      	bne.n	8000bf2 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bd2:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	7bdb      	ldrb	r3, [r3, #15]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	3301      	adds	r3, #1
 8000be0:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	e00b      	b.n	8000c02 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	3301      	adds	r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	e007      	b.n	8000c02 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	3301      	adds	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d3c9      	bcc.n	8000ba4 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000c10:	bf00      	nop
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2140      	movs	r1, #64	@ 0x40
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff26 	bl	8000a6a <USART_GetFlagStatus>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d0f6      	beq.n	8000c12 <USART_SendData+0x80>
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <USART_SetBaudRate>:
 *
 * @Note              -  Resolve all the TODOs

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b088      	sub	sp, #32
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a31      	ldr	r2, [pc, #196]	@ (8000d08 <USART_SetBaudRate+0xd8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d003      	beq.n	8000c4e <USART_SetBaudRate+0x1e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a30      	ldr	r2, [pc, #192]	@ (8000d0c <USART_SetBaudRate+0xdc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d103      	bne.n	8000c56 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000c4e:	f7ff fe41 	bl	80008d4 <RCC_GetPCLK2Value>
 8000c52:	61f8      	str	r0, [r7, #28]
 8000c54:	e002      	b.n	8000c5c <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000c56:	f7ff fde5 	bl	8000824 <RCC_GetPCLK1Value>
 8000c5a:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8 ))
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00b      	beq.n	8000c80 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000c68:	69fa      	ldr	r2, [r7, #28]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4413      	add	r3, r2
 8000c70:	009a      	lsls	r2, r3, #2
 8000c72:	441a      	add	r2, r3
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	e00a      	b.n	8000c96 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	4613      	mov	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	4413      	add	r3, r2
 8000c88:	009a      	lsls	r2, r3, #2
 8000c8a:	441a      	add	r2, r3
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4a1d      	ldr	r2, [pc, #116]	@ (8000d10 <USART_SetBaudRate+0xe0>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	095b      	lsrs	r3, r3, #5
 8000ca0:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2264      	movs	r2, #100	@ 0x64
 8000cb0:	fb02 f303 	mul.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00a      	beq.n	8000cdc <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	3332      	adds	r3, #50	@ 0x32
 8000ccc:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <USART_SetBaudRate+0xe0>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	f003 0307 	and.w	r3, r3, #7
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e009      	b.n	8000cf0 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	3332      	adds	r3, #50	@ 0x32
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8000d10 <USART_SetBaudRate+0xe0>)
 8000ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	609a      	str	r2, [r3, #8]
}
 8000cfe:	bf00      	nop
 8000d00:	3720      	adds	r7, #32
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	40011400 	.word	0x40011400
 8000d10:	51eb851f 	.word	0x51eb851f

08000d14 <__libc_init_array>:
 8000d14:	b570      	push	{r4, r5, r6, lr}
 8000d16:	4d0d      	ldr	r5, [pc, #52]	@ (8000d4c <__libc_init_array+0x38>)
 8000d18:	4c0d      	ldr	r4, [pc, #52]	@ (8000d50 <__libc_init_array+0x3c>)
 8000d1a:	1b64      	subs	r4, r4, r5
 8000d1c:	10a4      	asrs	r4, r4, #2
 8000d1e:	2600      	movs	r6, #0
 8000d20:	42a6      	cmp	r6, r4
 8000d22:	d109      	bne.n	8000d38 <__libc_init_array+0x24>
 8000d24:	4d0b      	ldr	r5, [pc, #44]	@ (8000d54 <__libc_init_array+0x40>)
 8000d26:	4c0c      	ldr	r4, [pc, #48]	@ (8000d58 <__libc_init_array+0x44>)
 8000d28:	f000 f818 	bl	8000d5c <_init>
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	10a4      	asrs	r4, r4, #2
 8000d30:	2600      	movs	r6, #0
 8000d32:	42a6      	cmp	r6, r4
 8000d34:	d105      	bne.n	8000d42 <__libc_init_array+0x2e>
 8000d36:	bd70      	pop	{r4, r5, r6, pc}
 8000d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d3c:	4798      	blx	r3
 8000d3e:	3601      	adds	r6, #1
 8000d40:	e7ee      	b.n	8000d20 <__libc_init_array+0xc>
 8000d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d46:	4798      	blx	r3
 8000d48:	3601      	adds	r6, #1
 8000d4a:	e7f2      	b.n	8000d32 <__libc_init_array+0x1e>
 8000d4c:	08000d7c 	.word	0x08000d7c
 8000d50:	08000d7c 	.word	0x08000d7c
 8000d54:	08000d7c 	.word	0x08000d7c
 8000d58:	08000d80 	.word	0x08000d80

08000d5c <_init>:
 8000d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5e:	bf00      	nop
 8000d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d62:	bc08      	pop	{r3}
 8000d64:	469e      	mov	lr, r3
 8000d66:	4770      	bx	lr

08000d68 <_fini>:
 8000d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d6a:	bf00      	nop
 8000d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d6e:	bc08      	pop	{r3}
 8000d70:	469e      	mov	lr, r3
 8000d72:	4770      	bx	lr
